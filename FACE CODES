import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
       
        int length = scanner.nextInt();
        
        int[] array = new int[length];
        
      
        for (int i = 0; i < length; i++) {
            array[i] = scanner.nextInt();
        }
        
        boolean isPalindrome = isArrayPalindrome(array);
        if(isPalindrome == true){
          System.out.println("True");
        }else{
          System.out.println("False");
        }
        
        scanner.close();
    }

    public static boolean isArrayPalindrome(int[] array) {
        int start = 0;
        int end = array.length - 1;
        
        while (start < end) {
            if (array[start] != array[end]) {
                return false;
            }
            start++;
            end--;
        }
        return true;
    }
}

####################################

import java.util.Scanner;

class ListNode {
    int val;
    ListNode next;
    ListNode(int val) { this.val = val; }
}

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Get the number of elements in the first sorted linked list from the user
        
        int n1 = scanner.nextInt();

        // Get the elements of the first sorted linked list from the user
       
        ListNode list1 = null, tail1 = null;
        for (int i = 0; i < n1; i++) {
            int val = scanner.nextInt();
            if (list1 == null) {
                list1 = new ListNode(val);
                tail1 = list1;
            } else {
                tail1.next = new ListNode(val);
                tail1 = tail1.next;
            }
        }

        // Get the number of elements in the second sorted linked list from the user
        
        int n2 = scanner.nextInt();

        // Get the elements of the second sorted linked list from the user
       
        ListNode list2 = null, tail2 = null;
        for (int i = 0; i < n2; i++) {
            int val = scanner.nextInt();
            if (list2 == null) {
                list2 = new ListNode(val);
                tail2 = list2;
            } else {
                tail2.next = new ListNode(val);
                tail2 = tail2.next;
            }
        }

        // Merge the sorted linked lists
        ListNode mergedList = mergeSortedLinkedLists(list1, list2);

        // Print the merged sorted linked list
      
        printList(mergedList);

        scanner.close();
    }

    public static ListNode mergeSortedLinkedLists(ListNode list1, ListNode list2) {
        ListNode dummy = new ListNode(0); // Dummy node to simplify edge cases
        ListNode current = dummy;

        // Merge the lists until one is exhausted
        while (list1 != null && list2 != null) {
            if (list1.val <= list2.val) {
                current.next = list1;
                list1 = list1.next;
            } else {
                current.next = list2;
                list2 = list2.next;
            }
            current = current.next;
        }

        // Attach any remaining elements from list1 or list2
        if (list1 != null) {
            current.next = list1;
        } else {
            current.next = list2;
        }

        return dummy.next; // The merged list starts from the next node of dummy
    }

    public static void printList(ListNode head) {
        ListNode current = head;
        while (current != null) {
            System.out.print(current.val + "->");
            current = current.next;
        }
        System.out.println("NULL");
    }
}

    
  }
  
}
##########################

import java.util.Scanner;

class ListNode {
    int val;
    ListNode next;
    ListNode(int val) { this.val = val; }
}

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);


        ListNode dummy = new ListNode(0);
        ListNode tail = dummy;
        
     
        while (true) {
            int val = scanner.nextInt();
            if (val == -1) break;
            tail.next = new ListNode(val);
            tail = tail.next;
        }


        int k = scanner.nextInt();

       
        ListNode head = dummy.next;
        head = reverseKGroup(head, k);

        // Print the modified linked list
        printList(head);

        scanner.close();
    }

    public static ListNode reverseKGroup(ListNode head, int k) {
        if (head == null || k == 1) return head;

        ListNode dummy = new ListNode(0);
        dummy.next = head;

        ListNode current = dummy, next = dummy, prev = dummy;
        int count = 0;

        // Count the number of nodes in the linked list
        while (current.next != null) {
            current = current.next;
            count++;
        }

        // Reverse every k nodes
        while (count >= k) {
            current = prev.next;
            next = current.next;
            for (int i = 1; i < k; i++) {
                current.next = next.next;
                next.next = prev.next;
                prev.next = next;
                next = current.next;
            }
            prev = current;
            count -= k;
        }

        return dummy.next;
    }

    public static void printList(ListNode head) {
        ListNode current = head;
        while (current != null) {
            System.out.println(current.val);
            current = current.next;
        }
    }
}

###################### Mergre k sorted array ################

import java.util.PriorityQueue;
import java.util.Scanner;

class ListNode {
    int val;
    ListNode next;
    ListNode(int val) { this.val = val; }
}

public class Main
{
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Read the number of linked lists
        int k = scanner.nextInt();
        ListNode[] lists = new ListNode[k];

        // Read each linked list
        for (int i = 0; i < k; i++) {
            ListNode dummy = new ListNode(0);
            ListNode tail = dummy;
            while (true) {
                int val = scanner.nextInt();
                if (val == -1) break;
                tail.next = new ListNode(val);
                tail = tail.next;
            }
            lists[i] = dummy.next;
        }

        // Merge all linked lists
        ListNode mergedList = mergeKLists(lists);

        // Print the merged sorted linked list
        printList(mergedList);

        scanner.close();
    }

    public static ListNode mergeKLists(ListNode[] lists) {
        PriorityQueue<ListNode> minHeap = new PriorityQueue<>((a, b) -> a.val - b.val);

        // Add the first node of each list to the priority queue
        for (ListNode list : lists) {
            if (list != null) {
                minHeap.add(list);
            }
        }

        ListNode dummy = new ListNode(0);
        ListNode tail = dummy;

        while (!minHeap.isEmpty()) {
            ListNode minNode = minHeap.poll();
            tail.next = minNode;
            tail = tail.next;
            if (minNode.next != null) {
                minHeap.add(minNode.next);
            }
        }

        return dummy.next;
    }

    public static void printList(ListNode head) {
        ListNode current = head;
        while (current != null) {
            System.out.print(current.val + " ");
            current = current.next;
        }
        System.out.println();
    }
}
############### REORDER ###################

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
      Scanner scanner = new Scanner(System.in);
      int size = scanner.nextInt();
      int[] array = new int[size];

      for (int i = 0; i < size; i++) {
          array[i] = scanner.nextInt();
      }
      int start = 0;
      int end = array.length - 1;
      int[] NEWARRAY = new int[size];
      for(int i = start;i<=end;i++){
        NEWARRAY[i]=array[end-i];
      }
 
        for(int i = start ; i<=end ; i++){
          if(start<end){
            System.out.print(NEWARRAY[start]+" ");
            start++;
            System.out.print(NEWARRAY[end]+" ");
            end--;
          }
        }
      if(size%2!=0){
        int n = size/2;

        System.out.print(array[n]);
      }

        scanner.close();
    }
}
################################################################

import java.util.Scanner;

class ListNode {
    int val;
    ListNode next;
    ListNode(int val) { this.val = val; }
}

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Read the size of the linked list
        int n = scanner.nextInt();

        // Create a dummy head to simplify the list construction
        ListNode dummy = new ListNode(0);
        ListNode tail = dummy;

        // Read the input values and construct the linked list
        for (int i = 0; i < n; i++) {
            int val = scanner.nextInt();
            tail.next = new ListNode(val);
            tail = tail.next;
        }

        // The head of the linked list
        ListNode head = dummy.next;

        // Print the original linked list
  

        // Group nodes with odd indices followed by even indices
        ListNode reorderedHead = oddEvenList(head);

        // Print the reordered linked list
        
        printList(reorderedHead);

        scanner.close();
    }

    public static ListNode oddEvenList(ListNode head) {
        if (head == null) return head;

        ListNode odd = head;
        ListNode even = head.next;
        ListNode evenHead = even;

        while (even != null && even.next != null) {
            odd.next = even.next;
            odd = odd.next;
            even.next = odd.next;
            even = even.next;
        }

        odd.next = evenHead;
        return head;
    }

    public static void printList(ListNode head) {
        ListNode current = head;
        while (current != null) {
            System.out.print(current.val + " ");
            current = current.next;
        }
        System.out.println();
    }
}
########################

import java.util.*;

class Node {
    int num;
    Node next;

    Node(int a) {
        num = a;
        next = null;
    }
}

public class Main {
    static Node insertNode(Node head, int val) {
        Node newNode = new Node(val);
        if (head == null) {
            head = newNode;
            return head;
        }
        Node temp = head;
        while (temp.next != null)
            temp = temp.next;
        temp.next = newNode;
        return head;
    }

    static Node rotateright(Node head, int k) {
        if (head == null || head.next == null)
            return head;

        // Find the length of the list
        int length = 1;
        Node temp = head;
        while (temp.next != null) {
            length++;
            temp = temp.next;
        }

        // Make the list circular
        temp.next = head;

        // Find the new head after rotation
        k = k % length;
        int stepsToNewHead = length - k;
        Node newTail = head;
        for (int i = 1; i < stepsToNewHead; i++) {
            newTail = newTail.next;
        }

        Node newHead = newTail.next;
        newTail.next = null;

        return newHead;
    }

    static void printList(Node head) {
        Node temp = head;
        while (temp != null) {
            System.out.print(temp.num + " ");
            temp = temp.next;
        }
        System.out.println();
    }

    public static void main(String[] args) {
        Node head = null;

        Scanner sc = new Scanner(System.in);
        while (true) {
            int val = sc.nextInt();
            if (val == -1) {
                break;
            }
            head = insertNode(head, val);
        }
          

        System.out.println("Given linked list:");
        printList(head);

        // Rotate the list by k nodes
      int k1 = sc.nextInt();
      int k2 = k1 - 1;
      
        int k = k1-k2;
        head = rotateright(head, k);

        System.out.println("Rotated Linked list:");
        printList(head);
    }
}

################################

import java.util.Scanner;

public class Main {
    public static int longestValidParentheses(String s) {
        if (s == null || s.length() == 0) {
            return 0;
        }
        
        int maxLength = 0;
        int[] dp = new int[s.length()];
        
        for (int i = 1; i < s.length(); i++) {
            if (s.charAt(i) == ')') {
                if (s.charAt(i - 1) == '(') {
                    dp[i] = (i >= 2 ? dp[i - 2] : 0) + 2;
                } else if (i - dp[i - 1] > 0 && s.charAt(i - dp[i - 1] - 1) == '(') {
                    dp[i] = dp[i - 1] + (i - dp[i - 1] >= 2 ? dp[i - dp[i - 1] - 2] : 0) + 2;
                }
                maxLength = Math.max(maxLength, dp[i]);
            }
        }
        
        return maxLength;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String input = scanner.nextLine();
        int result = longestValidParentheses(input);
        System.out.println(result);
        scanner.close();
    }
}
################################ Infix to Postfix conversion #############

import java.util.*;

public class Main {
    
    // Function to determine precedence of operators
    static int precedence(char ch) {
        switch (ch) {
            case '+':
            case '-':
                return 1;
            case '*':
            case '/':
                return 2;
            case '^':
                return 3;
        }
        return -1;
    }
    
    // Function to convert infix to postfix
    static String infixToPostfix(String infix) {
        StringBuilder postfix = new StringBuilder();
        Stack<Character> stack = new Stack<>();
        
        for (int i = 0; i < infix.length(); i++) {
            char c = infix.charAt(i);
            
            // If the scanned character is an operand, add it to output
            if (Character.isLetterOrDigit(c)) {
                postfix.append(c);
            }
            // If the scanned character is '(', push it to the stack
            else if (c == '(') {
                stack.push(c);
            }
            // If the scanned character is ')', pop and output from the stack until '(' is encountered
            else if (c == ')') {
                while (!stack.isEmpty() && stack.peek() != '(') {
                    postfix.append(stack.pop());
                }
                stack.pop(); // Pop '(' from the stack
            }
            // If an operator is encountered
            else {
                while (!stack.isEmpty() && precedence(c) <= precedence(stack.peek())) {
                    postfix.append(stack.pop());
                }
                stack.push(c);
            }
        }
        
        // Pop all the operators from the stack
        while (!stack.isEmpty()) {
            postfix.append(stack.pop());
        }
        
        return postfix.toString();
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        String infix = scanner.nextLine();
        
        String postfix = infixToPostfix(infix);
       
        System.out.println(postfix);
        
        scanner.close();
    }
}

