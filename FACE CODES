import java.util.*;
class Main
{
  public static void main(String args[]){
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    int n1= n/2;
    int s1 = 0;
    int[] arr = new int[n];
    for(int i=0; i<n; i++){
      arr[i]=sc.nextInt();
    }
    if(n%2==0){
      for(int i=0;i<=n1;i++){
        if(arr[i] == arr[n-1-i]){
        s1 = 1;
        }
      }
    }
    else{
      for(int i=0;i<=n1-1;i++){
        if(arr[i] == arr[n-1-i]){
        s1 = 1;
        }
      }
    }
    if(s1==1){
    System.out.println("True");
    }else{
    System.out.println("False");
    }
####################################

import java.util.Scanner;

class ListNode {
    int val;
    ListNode next;
    ListNode(int val) { this.val = val; }
}

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Get the number of elements in the first sorted linked list from the user
        
        int n1 = scanner.nextInt();

        // Get the elements of the first sorted linked list from the user
       
        ListNode list1 = null, tail1 = null;
        for (int i = 0; i < n1; i++) {
            int val = scanner.nextInt();
            if (list1 == null) {
                list1 = new ListNode(val);
                tail1 = list1;
            } else {
                tail1.next = new ListNode(val);
                tail1 = tail1.next;
            }
        }

        // Get the number of elements in the second sorted linked list from the user
        
        int n2 = scanner.nextInt();

        // Get the elements of the second sorted linked list from the user
       
        ListNode list2 = null, tail2 = null;
        for (int i = 0; i < n2; i++) {
            int val = scanner.nextInt();
            if (list2 == null) {
                list2 = new ListNode(val);
                tail2 = list2;
            } else {
                tail2.next = new ListNode(val);
                tail2 = tail2.next;
            }
        }

        // Merge the sorted linked lists
        ListNode mergedList = mergeSortedLinkedLists(list1, list2);

        // Print the merged sorted linked list
      
        printList(mergedList);

        scanner.close();
    }

    public static ListNode mergeSortedLinkedLists(ListNode list1, ListNode list2) {
        ListNode dummy = new ListNode(0); // Dummy node to simplify edge cases
        ListNode current = dummy;

        // Merge the lists until one is exhausted
        while (list1 != null && list2 != null) {
            if (list1.val <= list2.val) {
                current.next = list1;
                list1 = list1.next;
            } else {
                current.next = list2;
                list2 = list2.next;
            }
            current = current.next;
        }

        // Attach any remaining elements from list1 or list2
        if (list1 != null) {
            current.next = list1;
        } else {
            current.next = list2;
        }

        return dummy.next; // The merged list starts from the next node of dummy
    }

    public static void printList(ListNode head) {
        ListNode current = head;
        while (current != null) {
            System.out.print(current.val + "->");
            current = current.next;
        }
        System.out.println("NULL");
    }
}

    
  }
  
}
