import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
       
        int length = scanner.nextInt();
        
        int[] array = new int[length];
        
      
        for (int i = 0; i < length; i++) {
            array[i] = scanner.nextInt();
        }
        
        boolean isPalindrome = isArrayPalindrome(array);
        if(isPalindrome == true){
          System.out.println("True");
        }else{
          System.out.println("False");
        }
        
        scanner.close();
    }

    public static boolean isArrayPalindrome(int[] array) {
        int start = 0;
        int end = array.length - 1;
        
        while (start < end) {
            if (array[start] != array[end]) {
                return false;
            }
            start++;
            end--;
        }
        return true;
    }
}

####################################

import java.util.Scanner;

class ListNode {
    int val;
    ListNode next;
    ListNode(int val) { this.val = val; }
}

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Get the number of elements in the first sorted linked list from the user
        
        int n1 = scanner.nextInt();

        // Get the elements of the first sorted linked list from the user
       
        ListNode list1 = null, tail1 = null;
        for (int i = 0; i < n1; i++) {
            int val = scanner.nextInt();
            if (list1 == null) {
                list1 = new ListNode(val);
                tail1 = list1;
            } else {
                tail1.next = new ListNode(val);
                tail1 = tail1.next;
            }
        }

        // Get the number of elements in the second sorted linked list from the user
        
        int n2 = scanner.nextInt();

        // Get the elements of the second sorted linked list from the user
       
        ListNode list2 = null, tail2 = null;
        for (int i = 0; i < n2; i++) {
            int val = scanner.nextInt();
            if (list2 == null) {
                list2 = new ListNode(val);
                tail2 = list2;
            } else {
                tail2.next = new ListNode(val);
                tail2 = tail2.next;
            }
        }

        // Merge the sorted linked lists
        ListNode mergedList = mergeSortedLinkedLists(list1, list2);

        // Print the merged sorted linked list
      
        printList(mergedList);

        scanner.close();
    }

    public static ListNode mergeSortedLinkedLists(ListNode list1, ListNode list2) {
        ListNode dummy = new ListNode(0); // Dummy node to simplify edge cases
        ListNode current = dummy;

        // Merge the lists until one is exhausted
        while (list1 != null && list2 != null) {
            if (list1.val <= list2.val) {
                current.next = list1;
                list1 = list1.next;
            } else {
                current.next = list2;
                list2 = list2.next;
            }
            current = current.next;
        }

        // Attach any remaining elements from list1 or list2
        if (list1 != null) {
            current.next = list1;
        } else {
            current.next = list2;
        }

        return dummy.next; // The merged list starts from the next node of dummy
    }

    public static void printList(ListNode head) {
        ListNode current = head;
        while (current != null) {
            System.out.print(current.val + "->");
            current = current.next;
        }
        System.out.println("NULL");
    }
}

    
  }
  
}
##########################

import java.util.Scanner;

class ListNode {
    int val;
    ListNode next;
    ListNode(int val) { this.val = val; }
}

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);


        ListNode dummy = new ListNode(0);
        ListNode tail = dummy;
        
     
        while (true) {
            int val = scanner.nextInt();
            if (val == -1) break;
            tail.next = new ListNode(val);
            tail = tail.next;
        }


        int k = scanner.nextInt();

       
        ListNode head = dummy.next;
        head = reverseKGroup(head, k);

        // Print the modified linked list
        printList(head);

        scanner.close();
    }

    public static ListNode reverseKGroup(ListNode head, int k) {
        if (head == null || k == 1) return head;

        ListNode dummy = new ListNode(0);
        dummy.next = head;

        ListNode current = dummy, next = dummy, prev = dummy;
        int count = 0;

        // Count the number of nodes in the linked list
        while (current.next != null) {
            current = current.next;
            count++;
        }

        // Reverse every k nodes
        while (count >= k) {
            current = prev.next;
            next = current.next;
            for (int i = 1; i < k; i++) {
                current.next = next.next;
                next.next = prev.next;
                prev.next = next;
                next = current.next;
            }
            prev = current;
            count -= k;
        }

        return dummy.next;
    }

    public static void printList(ListNode head) {
        ListNode current = head;
        while (current != null) {
            System.out.println(current.val);
            current = current.next;
        }
    }
}

###################### Mergre k sorted array ################

import java.util.PriorityQueue;
import java.util.Scanner;

class ListNode {
    int val;
    ListNode next;
    ListNode(int val) { this.val = val; }
}

public class Main
{
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Read the number of linked lists
        int k = scanner.nextInt();
        ListNode[] lists = new ListNode[k];

        // Read each linked list
        for (int i = 0; i < k; i++) {
            ListNode dummy = new ListNode(0);
            ListNode tail = dummy;
            while (true) {
                int val = scanner.nextInt();
                if (val == -1) break;
                tail.next = new ListNode(val);
                tail = tail.next;
            }
            lists[i] = dummy.next;
        }

        // Merge all linked lists
        ListNode mergedList = mergeKLists(lists);

        // Print the merged sorted linked list
        printList(mergedList);

        scanner.close();
    }

    public static ListNode mergeKLists(ListNode[] lists) {
        PriorityQueue<ListNode> minHeap = new PriorityQueue<>((a, b) -> a.val - b.val);

        // Add the first node of each list to the priority queue
        for (ListNode list : lists) {
            if (list != null) {
                minHeap.add(list);
            }
        }

        ListNode dummy = new ListNode(0);
        ListNode tail = dummy;

        while (!minHeap.isEmpty()) {
            ListNode minNode = minHeap.poll();
            tail.next = minNode;
            tail = tail.next;
            if (minNode.next != null) {
                minHeap.add(minNode.next);
            }
        }

        return dummy.next;
    }

    public static void printList(ListNode head) {
        ListNode current = head;
        while (current != null) {
            System.out.print(current.val + " ");
            current = current.next;
        }
        System.out.println();
    }
}
